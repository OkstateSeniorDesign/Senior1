
SeniorDesignProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002a2  00800100  00000462  000004f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000462  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000320  008003a2  008003a2  00000798  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000798  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00000808  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f28  00000000  00000000  00000960  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b40  00000000  00000000  00002888  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000967  00000000  00000000  000033c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000348  00000000  00000000  00003d30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007d6  00000000  00000000  00004078  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d96  00000000  00000000  0000484e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  000055e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	46 c0       	rjmp	.+140    	; 0x8e <__ctors_end>
   2:	00 00       	nop
   4:	6b c0       	rjmp	.+214    	; 0xdc <__bad_interrupt>
   6:	00 00       	nop
   8:	69 c0       	rjmp	.+210    	; 0xdc <__bad_interrupt>
   a:	00 00       	nop
   c:	67 c0       	rjmp	.+206    	; 0xdc <__bad_interrupt>
   e:	00 00       	nop
  10:	65 c0       	rjmp	.+202    	; 0xdc <__bad_interrupt>
  12:	00 00       	nop
  14:	63 c0       	rjmp	.+198    	; 0xdc <__bad_interrupt>
  16:	00 00       	nop
  18:	61 c0       	rjmp	.+194    	; 0xdc <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5f c0       	rjmp	.+190    	; 0xdc <__bad_interrupt>
  1e:	00 00       	nop
  20:	5d c0       	rjmp	.+186    	; 0xdc <__bad_interrupt>
  22:	00 00       	nop
  24:	5b c0       	rjmp	.+182    	; 0xdc <__bad_interrupt>
  26:	00 00       	nop
  28:	59 c0       	rjmp	.+178    	; 0xdc <__bad_interrupt>
  2a:	00 00       	nop
  2c:	57 c0       	rjmp	.+174    	; 0xdc <__bad_interrupt>
  2e:	00 00       	nop
  30:	55 c0       	rjmp	.+170    	; 0xdc <__bad_interrupt>
  32:	00 00       	nop
  34:	53 c0       	rjmp	.+166    	; 0xdc <__bad_interrupt>
  36:	00 00       	nop
  38:	51 c0       	rjmp	.+162    	; 0xdc <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4f c0       	rjmp	.+158    	; 0xdc <__bad_interrupt>
  3e:	00 00       	nop
  40:	67 c0       	rjmp	.+206    	; 0x110 <__vector_16>
  42:	00 00       	nop
  44:	4b c0       	rjmp	.+150    	; 0xdc <__bad_interrupt>
  46:	00 00       	nop
  48:	49 c0       	rjmp	.+146    	; 0xdc <__bad_interrupt>
  4a:	00 00       	nop
  4c:	47 c0       	rjmp	.+142    	; 0xdc <__bad_interrupt>
  4e:	00 00       	nop
  50:	45 c0       	rjmp	.+138    	; 0xdc <__bad_interrupt>
  52:	00 00       	nop
  54:	43 c0       	rjmp	.+134    	; 0xdc <__bad_interrupt>
  56:	00 00       	nop
  58:	41 c0       	rjmp	.+130    	; 0xdc <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3f c0       	rjmp	.+126    	; 0xdc <__bad_interrupt>
  5e:	00 00       	nop
  60:	3d c0       	rjmp	.+122    	; 0xdc <__bad_interrupt>
  62:	00 00       	nop
  64:	3b c0       	rjmp	.+118    	; 0xdc <__bad_interrupt>
  66:	00 00       	nop
  68:	39 c0       	rjmp	.+114    	; 0xdc <__bad_interrupt>
  6a:	00 00       	nop
  6c:	37 c0       	rjmp	.+110    	; 0xdc <__bad_interrupt>
  6e:	00 00       	nop
  70:	35 c0       	rjmp	.+106    	; 0xdc <__bad_interrupt>
  72:	00 00       	nop
  74:	33 c0       	rjmp	.+102    	; 0xdc <__bad_interrupt>
  76:	00 00       	nop
  78:	31 c0       	rjmp	.+98     	; 0xdc <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2f c0       	rjmp	.+94     	; 0xdc <__bad_interrupt>
  7e:	00 00       	nop
  80:	2d c0       	rjmp	.+90     	; 0xdc <__bad_interrupt>
  82:	00 00       	nop
  84:	2b c0       	rjmp	.+86     	; 0xdc <__bad_interrupt>
  86:	00 00       	nop
  88:	29 c0       	rjmp	.+82     	; 0xdc <__bad_interrupt>
	...

0000008c <__ctors_start>:
  8c:	cc 00       	.word	0x00cc	; ????

0000008e <__ctors_end>:
  8e:	11 24       	eor	r1, r1
  90:	1f be       	out	0x3f, r1	; 63
  92:	cf ef       	ldi	r28, 0xFF	; 255
  94:	d0 e4       	ldi	r29, 0x40	; 64
  96:	de bf       	out	0x3e, r29	; 62
  98:	cd bf       	out	0x3d, r28	; 61

0000009a <__do_copy_data>:
  9a:	13 e0       	ldi	r17, 0x03	; 3
  9c:	a0 e0       	ldi	r26, 0x00	; 0
  9e:	b1 e0       	ldi	r27, 0x01	; 1
  a0:	e2 e6       	ldi	r30, 0x62	; 98
  a2:	f4 e0       	ldi	r31, 0x04	; 4
  a4:	00 e0       	ldi	r16, 0x00	; 0
  a6:	0b bf       	out	0x3b, r16	; 59
  a8:	02 c0       	rjmp	.+4      	; 0xae <__do_copy_data+0x14>
  aa:	07 90       	elpm	r0, Z+
  ac:	0d 92       	st	X+, r0
  ae:	a2 3a       	cpi	r26, 0xA2	; 162
  b0:	b1 07       	cpc	r27, r17
  b2:	d9 f7       	brne	.-10     	; 0xaa <__do_copy_data+0x10>

000000b4 <__do_clear_bss>:
  b4:	26 e0       	ldi	r18, 0x06	; 6
  b6:	a2 ea       	ldi	r26, 0xA2	; 162
  b8:	b3 e0       	ldi	r27, 0x03	; 3
  ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
  bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
  be:	a2 3c       	cpi	r26, 0xC2	; 194
  c0:	b2 07       	cpc	r27, r18
  c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>

000000c4 <__do_global_ctors>:
  c4:	10 e0       	ldi	r17, 0x00	; 0
  c6:	c7 e4       	ldi	r28, 0x47	; 71
  c8:	d0 e0       	ldi	r29, 0x00	; 0
  ca:	03 c0       	rjmp	.+6      	; 0xd2 <__do_global_ctors+0xe>
  cc:	21 97       	sbiw	r28, 0x01	; 1
  ce:	fe 01       	movw	r30, r28
  d0:	bd d1       	rcall	.+890    	; 0x44c <__tablejump2__>
  d2:	c6 34       	cpi	r28, 0x46	; 70
  d4:	d1 07       	cpc	r29, r17
  d6:	d1 f7       	brne	.-12     	; 0xcc <__do_global_ctors+0x8>
  d8:	02 d0       	rcall	.+4      	; 0xde <main>
  da:	c1 c1       	rjmp	.+898    	; 0x45e <_exit>

000000dc <__bad_interrupt>:
  dc:	91 cf       	rjmp	.-222    	; 0x0 <__vectors>

000000de <main>:
SPI spi;
WeaponMatrix weaponMatrix;

int main(void)
{
	weaponMatrix.initMatrix(spi);
  de:	60 e0       	ldi	r22, 0x00	; 0
  e0:	82 ea       	ldi	r24, 0xA2	; 162
  e2:	93 e0       	ldi	r25, 0x03	; 3
  e4:	9a d1       	rcall	.+820    	; 0x41a <_ZN12WeaponMatrix10initMatrixE3SPI>
  e6:	0f 2e       	mov	r0, r31
  e8:	f9 e9       	ldi	r31, 0x99	; 153
  ea:	ef 2e       	mov	r14, r31
  ec:	f3 e0       	ldi	r31, 0x03	; 3
  ee:	ff 2e       	mov	r15, r31
  f0:	f0 2d       	mov	r31, r0
  f2:	0c e9       	ldi	r16, 0x9C	; 156
  f4:	13 e0       	ldi	r17, 0x03	; 3
	template <typename T> uint16_t SPIOut(const T& value)
	{
		const uint8_t * p = (const uint8_t*) &value;
		uint16_t i;
		for (i = 0; i < sizeof value; i++){
			sendSPI(*p++);
  f6:	68 e0       	ldi	r22, 0x08	; 8
  f8:	85 ea       	ldi	r24, 0xA5	; 165
  fa:	96 e0       	ldi	r25, 0x06	; 6
  fc:	68 d0       	rcall	.+208    	; 0x1ce <_ZN3SPI7sendSPIEh>
  fe:	e7 01       	movw	r28, r14
 100:	69 91       	ld	r22, Y+
 102:	85 ea       	ldi	r24, 0xA5	; 165
 104:	96 e0       	ldi	r25, 0x06	; 6
 106:	63 d0       	rcall	.+198    	; 0x1ce <_ZN3SPI7sendSPIEh>
	//Send out any data type over SPI
	template <typename T> uint16_t SPIOut(const T& value)
	{
		const uint8_t * p = (const uint8_t*) &value;
		uint16_t i;
		for (i = 0; i < sizeof value; i++){
 108:	c0 17       	cp	r28, r16
 10a:	d1 07       	cpc	r29, r17
 10c:	c9 f7       	brne	.-14     	; 0x100 <main+0x22>
 10e:	f3 cf       	rjmp	.-26     	; 0xf6 <main+0x18>

00000110 <__vector_16>:
ISR(TIMER0_COMPA_vect){
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	0b b6       	in	r0, 0x3b	; 59
 11c:	0f 92       	push	r0
 11e:	0f 93       	push	r16
 120:	1f 93       	push	r17
 122:	2f 93       	push	r18
 124:	3f 93       	push	r19
 126:	4f 93       	push	r20
 128:	5f 93       	push	r21
 12a:	6f 93       	push	r22
 12c:	7f 93       	push	r23
 12e:	8f 93       	push	r24
 130:	9f 93       	push	r25
 132:	af 93       	push	r26
 134:	bf 93       	push	r27
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	ef 93       	push	r30
 13c:	ff 93       	push	r31
 13e:	cc e9       	ldi	r28, 0x9C	; 156
 140:	d3 e0       	ldi	r29, 0x03	; 3
 142:	0f e9       	ldi	r16, 0x9F	; 159
 144:	13 e0       	ldi	r17, 0x03	; 3
		template <typename T> uint16_t UARTOut(const T& value)
		{
			const uint8_t * p = (const uint8_t*) &value;
			uint16_t i;
			for (i = 0; i < sizeof value; i++)
			putByte(*p++);
 146:	69 91       	ld	r22, Y+
 148:	81 ec       	ldi	r24, 0xC1	; 193
 14a:	96 e0       	ldi	r25, 0x06	; 6
 14c:	eb d0       	rcall	.+470    	; 0x324 <_ZN4UART7putByteEh>
		//Send out any data type over uart
		template <typename T> uint16_t UARTOut(const T& value)
		{
			const uint8_t * p = (const uint8_t*) &value;
			uint16_t i;
			for (i = 0; i < sizeof value; i++)
 14e:	c0 17       	cp	r28, r16
 150:	d1 07       	cpc	r29, r17
 152:	c9 f7       	brne	.-14     	; 0x146 <__vector_16+0x36>
 154:	cf e9       	ldi	r28, 0x9F	; 159
 156:	d3 e0       	ldi	r29, 0x03	; 3
 158:	02 ea       	ldi	r16, 0xA2	; 162
 15a:	13 e0       	ldi	r17, 0x03	; 3
			putByte(*p++);
 15c:	69 91       	ld	r22, Y+
 15e:	81 ec       	ldi	r24, 0xC1	; 193
 160:	96 e0       	ldi	r25, 0x06	; 6
 162:	e0 d0       	rcall	.+448    	; 0x324 <_ZN4UART7putByteEh>
		//Send out any data type over uart
		template <typename T> uint16_t UARTOut(const T& value)
		{
			const uint8_t * p = (const uint8_t*) &value;
			uint16_t i;
			for (i = 0; i < sizeof value; i++)
 164:	c0 17       	cp	r28, r16
 166:	d1 07       	cpc	r29, r17
 168:	c9 f7       	brne	.-14     	; 0x15c <__vector_16+0x4c>
	debugUART<<"hi"<<endl;
}
 16a:	ff 91       	pop	r31
 16c:	ef 91       	pop	r30
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	bf 91       	pop	r27
 174:	af 91       	pop	r26
 176:	9f 91       	pop	r25
 178:	8f 91       	pop	r24
 17a:	7f 91       	pop	r23
 17c:	6f 91       	pop	r22
 17e:	5f 91       	pop	r21
 180:	4f 91       	pop	r20
 182:	3f 91       	pop	r19
 184:	2f 91       	pop	r18
 186:	1f 91       	pop	r17
 188:	0f 91       	pop	r16
 18a:	0f 90       	pop	r0
 18c:	0b be       	out	0x3b, r0	; 59
 18e:	0f 90       	pop	r0
 190:	0f be       	out	0x3f, r0	; 63
 192:	0f 90       	pop	r0
 194:	1f 90       	pop	r1
 196:	18 95       	reti

00000198 <_GLOBAL__sub_I_debugUART>:
#include "UART.h"
#include "Timer0.h"
#include "SPI.h"
#include "WeaponMatrix.h"

UART debugUART;
 198:	81 ec       	ldi	r24, 0xC1	; 193
 19a:	96 e0       	ldi	r25, 0x06	; 6
 19c:	c1 d0       	rcall	.+386    	; 0x320 <_ZN4UARTC1Ev>
Timer0 timer0;
 19e:	86 ea       	ldi	r24, 0xA6	; 166
 1a0:	96 e0       	ldi	r25, 0x06	; 6
 1a2:	77 d0       	rcall	.+238    	; 0x292 <_ZN6Timer0C1Ev>
SPI spi;
 1a4:	85 ea       	ldi	r24, 0xA5	; 165
 1a6:	96 e0       	ldi	r25, 0x06	; 6
 1a8:	5e d0       	rcall	.+188    	; 0x266 <_ZN3SPIC1Ev>
WeaponMatrix weaponMatrix;
 1aa:	82 ea       	ldi	r24, 0xA2	; 162
 1ac:	93 e0       	ldi	r25, 0x03	; 3
 1ae:	c2 c0       	rjmp	.+388    	; 0x334 <_ZN12WeaponMatrixC1Ev>
 1b0:	08 95       	ret

000001b2 <_ZN3SPI9initMSPIMEv>:
	// receive byte, return it
	return UDR1;
}  // end of sendSPI
//Sets the slave
void SPI::pickASlave(SLAVE s){
	PORTC=s;
 1b2:	ec ec       	ldi	r30, 0xCC	; 204
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	11 82       	std	Z+1, r1	; 0x01
 1b8:	10 82       	st	Z, r1
 1ba:	54 9a       	sbi	0x0a, 4	; 10
 1bc:	80 ec       	ldi	r24, 0xC0	; 192
 1be:	80 93 ca 00 	sts	0x00CA, r24
 1c2:	88 e1       	ldi	r24, 0x18	; 24
 1c4:	80 93 c9 00 	sts	0x00C9, r24
 1c8:	11 82       	std	Z+1, r1	; 0x01
 1ca:	10 82       	st	Z, r1
 1cc:	08 95       	ret

000001ce <_ZN3SPI7sendSPIEh>:
 1ce:	e8 ec       	ldi	r30, 0xC8	; 200
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	85 ff       	sbrs	r24, 5
 1d6:	fd cf       	rjmp	.-6      	; 0x1d2 <_ZN3SPI7sendSPIEh+0x4>
 1d8:	60 93 ce 00 	sts	0x00CE, r22
 1dc:	e8 ec       	ldi	r30, 0xC8	; 200
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	80 81       	ld	r24, Z
 1e2:	88 23       	and	r24, r24
 1e4:	ec f7       	brge	.-6      	; 0x1e0 <_ZN3SPI7sendSPIEh+0x12>
 1e6:	80 91 ce 00 	lds	r24, 0x00CE
 1ea:	08 95       	ret

000001ec <_ZN3SPI15initSlaveSelectEv>:
/************************************************************************/
//Pre nothing
//Post PORTC will be set as output and all the slaves will be toggled once
/************************************************************************/
void SPI::initSlaveSelect(){
	DDRC|=(1<<PINC0)|(1<<PINC2)|(1<<PINC2)|(1<<PINC3)|(1<<PINC4)|(1<<PINC5)|(1<<PINC6)|(1<<PINC7);//Set PORTC as outputs
 1ec:	87 b1       	in	r24, 0x07	; 7
 1ee:	8d 6f       	ori	r24, 0xFD	; 253
 1f0:	87 b9       	out	0x07, r24	; 7
	// receive byte, return it
	return UDR1;
}  // end of sendSPI
//Sets the slave
void SPI::pickASlave(SLAVE s){
	PORTC=s;
 1f2:	80 e4       	ldi	r24, 0x40	; 64
 1f4:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f6:	2f e9       	ldi	r18, 0x9F	; 159
 1f8:	86 e8       	ldi	r24, 0x86	; 134
 1fa:	91 e0       	ldi	r25, 0x01	; 1
 1fc:	21 50       	subi	r18, 0x01	; 1
 1fe:	80 40       	sbci	r24, 0x00	; 0
 200:	90 40       	sbci	r25, 0x00	; 0
 202:	e1 f7       	brne	.-8      	; 0x1fc <_ZN3SPI15initSlaveSelectEv+0x10>
 204:	00 c0       	rjmp	.+0      	; 0x206 <_ZN3SPI15initSlaveSelectEv+0x1a>
 206:	00 00       	nop
 208:	80 e2       	ldi	r24, 0x20	; 32
 20a:	88 b9       	out	0x08, r24	; 8
 20c:	2f e9       	ldi	r18, 0x9F	; 159
 20e:	86 e8       	ldi	r24, 0x86	; 134
 210:	91 e0       	ldi	r25, 0x01	; 1
 212:	21 50       	subi	r18, 0x01	; 1
 214:	80 40       	sbci	r24, 0x00	; 0
 216:	90 40       	sbci	r25, 0x00	; 0
 218:	e1 f7       	brne	.-8      	; 0x212 <_ZN3SPI15initSlaveSelectEv+0x26>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <_ZN3SPI15initSlaveSelectEv+0x30>
 21c:	00 00       	nop
 21e:	80 e1       	ldi	r24, 0x10	; 16
 220:	88 b9       	out	0x08, r24	; 8
 222:	2f e9       	ldi	r18, 0x9F	; 159
 224:	86 e8       	ldi	r24, 0x86	; 134
 226:	91 e0       	ldi	r25, 0x01	; 1
 228:	21 50       	subi	r18, 0x01	; 1
 22a:	80 40       	sbci	r24, 0x00	; 0
 22c:	90 40       	sbci	r25, 0x00	; 0
 22e:	e1 f7       	brne	.-8      	; 0x228 <_ZN3SPI15initSlaveSelectEv+0x3c>
 230:	00 c0       	rjmp	.+0      	; 0x232 <_ZN3SPI15initSlaveSelectEv+0x46>
 232:	00 00       	nop
 234:	88 e0       	ldi	r24, 0x08	; 8
 236:	88 b9       	out	0x08, r24	; 8
 238:	2f e9       	ldi	r18, 0x9F	; 159
 23a:	86 e8       	ldi	r24, 0x86	; 134
 23c:	91 e0       	ldi	r25, 0x01	; 1
 23e:	21 50       	subi	r18, 0x01	; 1
 240:	80 40       	sbci	r24, 0x00	; 0
 242:	90 40       	sbci	r25, 0x00	; 0
 244:	e1 f7       	brne	.-8      	; 0x23e <_ZN3SPI15initSlaveSelectEv+0x52>
 246:	00 c0       	rjmp	.+0      	; 0x248 <_ZN3SPI15initSlaveSelectEv+0x5c>
 248:	00 00       	nop
 24a:	84 e0       	ldi	r24, 0x04	; 4
 24c:	88 b9       	out	0x08, r24	; 8
 24e:	2f e9       	ldi	r18, 0x9F	; 159
 250:	86 e8       	ldi	r24, 0x86	; 134
 252:	91 e0       	ldi	r25, 0x01	; 1
 254:	21 50       	subi	r18, 0x01	; 1
 256:	80 40       	sbci	r24, 0x00	; 0
 258:	90 40       	sbci	r25, 0x00	; 0
 25a:	e1 f7       	brne	.-8      	; 0x254 <_ZN3SPI15initSlaveSelectEv+0x68>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <_ZN3SPI15initSlaveSelectEv+0x72>
 25e:	00 00       	nop
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	88 b9       	out	0x08, r24	; 8
 264:	08 95       	ret

00000266 <_ZN3SPIC1Ev>:
﻿#include "SPI.h"

SPI::SPI(void){
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
 26a:	ec 01       	movw	r28, r24
	initMSPIM();
 26c:	a2 df       	rcall	.-188    	; 0x1b2 <_ZN3SPI9initMSPIMEv>
	initSlaveSelect();
 26e:	ce 01       	movw	r24, r28
 270:	bd df       	rcall	.-134    	; 0x1ec <_ZN3SPI15initSlaveSelectEv>
}
 272:	df 91       	pop	r29
 274:	cf 91       	pop	r28
 276:	08 95       	ret

00000278 <_ZN6Timer010initTimer0Ev>:
	initTimer0();
}

void Timer0::initTimer0(){
	
	ASSR = 0x00; 	//Use main clock
 278:	10 92 b6 00 	sts	0x00B6, r1
	
	TCNT0 = 0;//Set counter to zero. It will auto clear.
 27c:	16 bc       	out	0x26, r1	; 38

	//Set counter to correct value.
	OCR0A = 142; //16000000=1*112001*x; x=142.85
 27e:	8e e8       	ldi	r24, 0x8E	; 142
 280:	87 bd       	out	0x27, r24	; 39
	
	TCCR0A = 1<<(WGM01); //Make the counter register reset when counter is reached
 282:	82 e0       	ldi	r24, 0x02	; 2
 284:	84 bd       	out	0x24, r24	; 36
	
	//TCCR0B = ((1<<CS00));//Set prescaler for 1;

	
	TIFR0 = TIFR0;//Clear interrupt flag so interrupt can fire.
 286:	95 b3       	in	r25, 0x15	; 21
 288:	95 bb       	out	0x15, r25	; 21

	TIMSK0 = 1<< (OCIE0A);//Enable interrupt when counter is reached.
 28a:	80 93 6e 00 	sts	0x006E, r24
	
	sei();
 28e:	78 94       	sei
 290:	08 95       	ret

00000292 <_ZN6Timer0C1Ev>:
﻿#include "Timer0.h"
Timer0::Timer0(void){
 292:	fc 01       	movw	r30, r24
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	80 83       	st	Z, r24
 298:	12 82       	std	Z+2, r1	; 0x02
 29a:	11 82       	std	Z+1, r1	; 0x01
 29c:	14 82       	std	Z+4, r1	; 0x04
 29e:	13 82       	std	Z+3, r1	; 0x03
 2a0:	16 82       	std	Z+6, r1	; 0x06
 2a2:	15 82       	std	Z+5, r1	; 0x05
 2a4:	10 86       	std	Z+8, r1	; 0x08
 2a6:	17 82       	std	Z+7, r1	; 0x07
 2a8:	84 e1       	ldi	r24, 0x14	; 20
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	92 87       	std	Z+10, r25	; 0x0a
 2ae:	81 87       	std	Z+9, r24	; 0x09
 2b0:	8c e2       	ldi	r24, 0x2C	; 44
 2b2:	91 e0       	ldi	r25, 0x01	; 1
 2b4:	94 87       	std	Z+12, r25	; 0x0c
 2b6:	83 87       	std	Z+11, r24	; 0x0b
 2b8:	88 e6       	ldi	r24, 0x68	; 104
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	96 87       	std	Z+14, r25	; 0x0e
 2be:	85 87       	std	Z+13, r24	; 0x0d
 2c0:	88 e5       	ldi	r24, 0x58	; 88
 2c2:	92 e0       	ldi	r25, 0x02	; 2
 2c4:	90 8b       	std	Z+16, r25	; 0x10
 2c6:	87 87       	std	Z+15, r24	; 0x0f
 2c8:	80 e8       	ldi	r24, 0x80	; 128
 2ca:	92 e0       	ldi	r25, 0x02	; 2
 2cc:	92 8b       	std	Z+18, r25	; 0x12
 2ce:	81 8b       	std	Z+17, r24	; 0x11
 2d0:	84 e9       	ldi	r24, 0x94	; 148
 2d2:	92 e0       	ldi	r25, 0x02	; 2
 2d4:	94 8b       	std	Z+20, r25	; 0x14
 2d6:	83 8b       	std	Z+19, r24	; 0x13
 2d8:	84 e8       	ldi	r24, 0x84	; 132
 2da:	93 e0       	ldi	r25, 0x03	; 3
 2dc:	96 8b       	std	Z+22, r25	; 0x16
 2de:	85 8b       	std	Z+21, r24	; 0x15
 2e0:	8f ea       	ldi	r24, 0xAF	; 175
 2e2:	94 e0       	ldi	r25, 0x04	; 4
 2e4:	90 8f       	std	Z+24, r25	; 0x18
 2e6:	87 8b       	std	Z+23, r24	; 0x17
 2e8:	8f ec       	ldi	r24, 0xCF	; 207
 2ea:	97 e0       	ldi	r25, 0x07	; 7
 2ec:	92 8f       	std	Z+26, r25	; 0x1a
 2ee:	81 8f       	std	Z+25, r24	; 0x19
	initTimer0();
 2f0:	cf 01       	movw	r24, r30
 2f2:	c2 cf       	rjmp	.-124    	; 0x278 <_ZN6Timer010initTimer0Ev>
 2f4:	08 95       	ret

000002f6 <_ZN4UART9initUART1Ev>:

/************************************************************************/
void UART::initUART1(void)
{

	DDRD |= 1<<(PD0);//set TX as output
 2f6:	50 9a       	sbi	0x0a, 0	; 10
	DDRD &= ~1<<(PD1);//set RX as input
 2f8:	8a b1       	in	r24, 0x0a	; 10
 2fa:	8c 7f       	andi	r24, 0xFC	; 252
 2fc:	8a b9       	out	0x0a, r24	; 10

	// Set baud rate; lower byte and top nibble
	UBRR0H = ((_UBRR) & 0xF00);
 2fe:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (uint8_t) ((_UBRR) & 0xFF);
 302:	87 e0       	ldi	r24, 0x07	; 7
 304:	80 93 c4 00 	sts	0x00C4, r24

	//Start Coms
	TX_START();
 308:	e1 ec       	ldi	r30, 0xC1	; 193
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	80 81       	ld	r24, Z
 30e:	88 60       	ori	r24, 0x08	; 8
 310:	80 83       	st	Z, r24
	RX_START();
 312:	80 81       	ld	r24, Z
 314:	80 61       	ori	r24, 0x10	; 16
 316:	80 83       	st	Z, r24

	// Set frame format = 8-N-1
	UCSR0C = (_DATA << UCSZ00);
 318:	86 e0       	ldi	r24, 0x06	; 6
 31a:	80 93 c2 00 	sts	0x00C2, r24
 31e:	08 95       	ret

00000320 <_ZN4UARTC1Ev>:
﻿#include "UART.h"

UART::UART(void){
	initUART1();
 320:	ea cf       	rjmp	.-44     	; 0x2f6 <_ZN4UART9initUART1Ev>
 322:	08 95       	ret

00000324 <_ZN4UART7putByteEh>:
//Post data passed in is wrote out.
/************************************************************************/
void UART::putByte(unsigned char data)
{
	
	while (!(UCSR0A & 1<<(UDRE0)));//Wait for last transmission to compleat
 324:	e0 ec       	ldi	r30, 0xC0	; 192
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	80 81       	ld	r24, Z
 32a:	85 ff       	sbrs	r24, 5
 32c:	fd cf       	rjmp	.-6      	; 0x328 <_ZN4UART7putByteEh+0x4>
	UDR0 = (unsigned char) data;
 32e:	60 93 c6 00 	sts	0x00C6, r22
 332:	08 95       	ret

00000334 <_ZN12WeaponMatrixC1Ev>:
				spi<<buffB[counter+i];
			}
		}
	}
}
void WeaponMatrix::newString(char * newData){
 334:	cf 93       	push	r28
 336:	df 93       	push	r29
 338:	ec 01       	movw	r28, r24
 33a:	95 df       	rcall	.-214    	; 0x266 <_ZN3SPIC1Ev>
 33c:	83 e0       	ldi	r24, 0x03	; 3
 33e:	89 83       	std	Y+1, r24	; 0x01
 340:	8a e0       	ldi	r24, 0x0A	; 10
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	9b 83       	std	Y+3, r25	; 0x03
 346:	8a 83       	std	Y+2, r24	; 0x02
 348:	1c 82       	std	Y+4, r1	; 0x04
 34a:	fe 01       	movw	r30, r28
 34c:	e7 59       	subi	r30, 0x97	; 151
 34e:	ff 4f       	sbci	r31, 0xFF	; 255
 350:	10 82       	st	Z, r1
 352:	de 01       	movw	r26, r28
 354:	a6 59       	subi	r26, 0x96	; 150
 356:	bf 4f       	sbci	r27, 0xFF	; 255
 358:	89 e9       	ldi	r24, 0x99	; 153
 35a:	92 e0       	ldi	r25, 0x02	; 2
 35c:	e0 e0       	ldi	r30, 0x00	; 0
 35e:	f1 e0       	ldi	r31, 0x01	; 1
 360:	01 90       	ld	r0, Z+
 362:	0d 92       	st	X+, r0
 364:	01 97       	sbiw	r24, 0x01	; 1
 366:	e1 f7       	brne	.-8      	; 0x360 <_ZN12WeaponMatrixC1Ev+0x2c>
 368:	df 91       	pop	r29
 36a:	cf 91       	pop	r28
 36c:	08 95       	ret

0000036e <_ZlsI5SLAVEER3SPIS2_RKT_>:
	
};


//Overload << (insertion) operator for SPIs
template <typename T> SPI& operator<<(SPI& os, const T& data )
 36e:	cf 93       	push	r28
 370:	df 93       	push	r29
 372:	ec 01       	movw	r28, r24
	template <typename T> uint16_t SPIOut(const T& value)
	{
		const uint8_t * p = (const uint8_t*) &value;
		uint16_t i;
		for (i = 0; i < sizeof value; i++){
			sendSPI(*p++);
 374:	fb 01       	movw	r30, r22
 376:	60 81       	ld	r22, Z
 378:	2a df       	rcall	.-428    	; 0x1ce <_ZN3SPI7sendSPIEh>
//Overload << (insertion) operator for SPIs
template <typename T> SPI& operator<<(SPI& os, const T& data )
{
	os.SPIOut(data);
	return os;
}
 37a:	ce 01       	movw	r24, r28
 37c:	df 91       	pop	r29
 37e:	cf 91       	pop	r28
 380:	08 95       	ret

00000382 <_ZlsIhER3SPIS1_RKT_>:
	
};


//Overload << (insertion) operator for SPIs
template <typename T> SPI& operator<<(SPI& os, const T& data )
 382:	cf 93       	push	r28
 384:	df 93       	push	r29
 386:	ec 01       	movw	r28, r24
	template <typename T> uint16_t SPIOut(const T& value)
	{
		const uint8_t * p = (const uint8_t*) &value;
		uint16_t i;
		for (i = 0; i < sizeof value; i++){
			sendSPI(*p++);
 388:	fb 01       	movw	r30, r22
 38a:	60 81       	ld	r22, Z
 38c:	20 df       	rcall	.-448    	; 0x1ce <_ZN3SPI7sendSPIEh>
//Overload << (insertion) operator for SPIs
template <typename T> SPI& operator<<(SPI& os, const T& data )
{
	os.SPIOut(data);
	return os;
}
 38e:	ce 01       	movw	r24, r28
 390:	df 91       	pop	r29
 392:	cf 91       	pop	r28
 394:	08 95       	ret

00000396 <_ZN12WeaponMatrix10setCommandEhh>:
	
WeaponMatrix::WeaponMatrix(){
	
	
}
void WeaponMatrix::setCommand(uint8_t reg, uint8_t data){
 396:	cf 92       	push	r12
 398:	df 92       	push	r13
 39a:	ff 92       	push	r15
 39c:	0f 93       	push	r16
 39e:	1f 93       	push	r17
 3a0:	cf 93       	push	r28
 3a2:	df 93       	push	r29
 3a4:	00 d0       	rcall	.+0      	; 0x3a6 <_ZN12WeaponMatrix10setCommandEhh+0x10>
 3a6:	00 d0       	rcall	.+0      	; 0x3a8 <_ZN12WeaponMatrix10setCommandEhh+0x12>
 3a8:	1f 92       	push	r1
 3aa:	cd b7       	in	r28, 0x3d	; 61
 3ac:	de b7       	in	r29, 0x3e	; 62
 3ae:	6c 01       	movw	r12, r24
 3b0:	6c 83       	std	Y+4, r22	; 0x04
 3b2:	4d 83       	std	Y+5, r20	; 0x05
	spi<<none<<weaponIndicatorMatrix;
 3b4:	88 e0       	ldi	r24, 0x08	; 8
 3b6:	8b 83       	std	Y+3, r24	; 0x03
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	8a 83       	std	Y+2, r24	; 0x02
 3bc:	0c 2d       	mov	r16, r12
 3be:	fd 2c       	mov	r15, r13
 3c0:	be 01       	movw	r22, r28
 3c2:	6e 5f       	subi	r22, 0xFE	; 254
 3c4:	7f 4f       	sbci	r23, 0xFF	; 255
 3c6:	c6 01       	movw	r24, r12
 3c8:	d2 df       	rcall	.-92     	; 0x36e <_ZlsI5SLAVEER3SPIS2_RKT_>
 3ca:	be 01       	movw	r22, r28
 3cc:	6d 5f       	subi	r22, 0xFD	; 253
 3ce:	7f 4f       	sbci	r23, 0xFF	; 255
 3d0:	ce df       	rcall	.-100    	; 0x36e <_ZlsI5SLAVEER3SPIS2_RKT_>
	for(uint8_t i=numPanels;i>0;--i)
 3d2:	f6 01       	movw	r30, r12
 3d4:	11 81       	ldd	r17, Z+1	; 0x01
 3d6:	11 23       	and	r17, r17
 3d8:	61 f0       	breq	.+24     	; 0x3f2 <_ZN12WeaponMatrix10setCommandEhh+0x5c>
		spi<<reg<<data;
 3da:	be 01       	movw	r22, r28
 3dc:	6c 5f       	subi	r22, 0xFC	; 252
 3de:	7f 4f       	sbci	r23, 0xFF	; 255
 3e0:	80 2f       	mov	r24, r16
 3e2:	9f 2d       	mov	r25, r15
 3e4:	ce df       	rcall	.-100    	; 0x382 <_ZlsIhER3SPIS1_RKT_>
 3e6:	be 01       	movw	r22, r28
 3e8:	6b 5f       	subi	r22, 0xFB	; 251
 3ea:	7f 4f       	sbci	r23, 0xFF	; 255
 3ec:	ca df       	rcall	.-108    	; 0x382 <_ZlsIhER3SPIS1_RKT_>
	
	
}
void WeaponMatrix::setCommand(uint8_t reg, uint8_t data){
	spi<<none<<weaponIndicatorMatrix;
	for(uint8_t i=numPanels;i>0;--i)
 3ee:	11 50       	subi	r17, 0x01	; 1
 3f0:	a1 f7       	brne	.-24     	; 0x3da <_ZN12WeaponMatrix10setCommandEhh+0x44>
		spi<<reg<<data;
	spi<<none;
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	89 83       	std	Y+1, r24	; 0x01
 3f6:	be 01       	movw	r22, r28
 3f8:	6f 5f       	subi	r22, 0xFF	; 255
 3fa:	7f 4f       	sbci	r23, 0xFF	; 255
 3fc:	c6 01       	movw	r24, r12
 3fe:	b7 df       	rcall	.-146    	; 0x36e <_ZlsI5SLAVEER3SPIS2_RKT_>
}
 400:	0f 90       	pop	r0
 402:	0f 90       	pop	r0
 404:	0f 90       	pop	r0
 406:	0f 90       	pop	r0
 408:	0f 90       	pop	r0
 40a:	df 91       	pop	r29
 40c:	cf 91       	pop	r28
 40e:	1f 91       	pop	r17
 410:	0f 91       	pop	r16
 412:	ff 90       	pop	r15
 414:	df 90       	pop	r13
 416:	cf 90       	pop	r12
 418:	08 95       	ret

0000041a <_ZN12WeaponMatrix10initMatrixE3SPI>:
void WeaponMatrix::initMatrix(SPI out){
 41a:	cf 93       	push	r28
 41c:	df 93       	push	r29
 41e:	ec 01       	movw	r28, r24
		 spi=out;
		 setCommand(max7219_reg_scanLimit, 0x07);
 420:	47 e0       	ldi	r20, 0x07	; 7
 422:	6b e0       	ldi	r22, 0x0B	; 11
 424:	b8 df       	rcall	.-144    	; 0x396 <_ZN12WeaponMatrix10setCommandEhh>
		 setCommand(max7219_reg_decodeMode, 0x00);  // using an led matrix (not digits)
 426:	40 e0       	ldi	r20, 0x00	; 0
 428:	69 e0       	ldi	r22, 0x09	; 9
 42a:	ce 01       	movw	r24, r28
 42c:	b4 df       	rcall	.-152    	; 0x396 <_ZN12WeaponMatrix10setCommandEhh>
		 setCommand(max7219_reg_shutdown, 0x01);    // not in shutdown mode
 42e:	41 e0       	ldi	r20, 0x01	; 1
 430:	6c e0       	ldi	r22, 0x0C	; 12
 432:	ce 01       	movw	r24, r28
 434:	b0 df       	rcall	.-160    	; 0x396 <_ZN12WeaponMatrix10setCommandEhh>
		 setCommand(max7219_reg_displayTest, 0x00); // no display test
 436:	40 e0       	ldi	r20, 0x00	; 0
 438:	6f e0       	ldi	r22, 0x0F	; 15
 43a:	ce 01       	movw	r24, r28
 43c:	ac df       	rcall	.-168    	; 0x396 <_ZN12WeaponMatrix10setCommandEhh>
		 setCommand(max7219_reg_intensity, 0x0f);
 43e:	4f e0       	ldi	r20, 0x0F	; 15
 440:	6a e0       	ldi	r22, 0x0A	; 10
 442:	ce 01       	movw	r24, r28
 444:	a8 df       	rcall	.-176    	; 0x396 <_ZN12WeaponMatrix10setCommandEhh>
}
 446:	df 91       	pop	r29
 448:	cf 91       	pop	r28
 44a:	08 95       	ret

0000044c <__tablejump2__>:
 44c:	ee 0f       	add	r30, r30
 44e:	ff 1f       	adc	r31, r31
 450:	00 24       	eor	r0, r0
 452:	00 1c       	adc	r0, r0
 454:	0b be       	out	0x3b, r0	; 59
 456:	07 90       	elpm	r0, Z+
 458:	f6 91       	elpm	r31, Z
 45a:	e0 2d       	mov	r30, r0
 45c:	09 94       	ijmp

0000045e <_exit>:
 45e:	f8 94       	cli

00000460 <__stop_program>:
 460:	ff cf       	rjmp	.-2      	; 0x460 <__stop_program>
